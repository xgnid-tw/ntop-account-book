version: 2.1

orbs:
  heroku: circleci/heroku@0.0.10 # Invoke the Heroku orb

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  linode_deploy: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - build
      - deploy: # Use the pre-configured job, deploy-via-git
          requires:
            - build
          filters:
            branches:
              only: main

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build: # This is the name of the job, feel free to change it to better match what you're trying to do!
    working_directory: ~/ntop-account-book

    # These next lines defines a Docker executors: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of the convenience images from CircleCI's Developer Hub
    # A list of available CircleCI Docker convenience images are available here: https://circleci.com/developer/images/image/cimg/python
    # The executor is the environment in which the steps below will be executed - below will use a python 3.10.2 container
    # Change the version below to your required version of python
    docker:
      - image: cimg/python:3.10.2
    # Checkout the code as the first step. This is a dedicated CircleCI step.
    # The python orb's install-packages step will install the dependencies from a Pipfile via Pipenv by default.
    # Here we're making sure we use just use the system-wide pip. By default it uses the project root's requirements.txt.
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
      - run: sudo chown -R circleci:circleci /usr/local/bin
      - restore_cache: # ensure this step occurs *before* installing dependencies
          key: deps9-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
      - run:
          command: |
            pipenv install
      - save_cache:
          key: deps9-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
          paths:
            - ".venv"
            - "/usr/local/bin"
            - "/usr/local/lib/python3.8/dist-packages/"
  deploy:
    docker:
      - image: cimg/python:3.10.2
    steps:
      - run: sudo apt-get update && sudo apt-get install rsync
      - attach_workspace:
          at: ntop-account-book/ntop/
      - add_ssh_keys
      - run: |
          echo 'ssh.xgnid.me ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAINw83wSAmzc8a+6ogibQ1lExzdfFCU83tUKy7uPRzuHU' >> ~/.ssh/known_hosts
          rsync -va --delete ntop-account-book/ntop/ $SSH_USER@$SSH_HOST:gx/ntop/
